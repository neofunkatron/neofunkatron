"""
Plot percolation data (as generated by fig7_genAndSaveData.py).
"""
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

import config as cf
import os
import os.path as op
import pickle
from metrics import percolation as perc
reload(perc)

# Set plots to make
undirected = True
directed = False

###############
# Load graphs
###############
load_dir = os.environ['DBW_SAVE_CACHE']
graph_names_und = ['Connectome', 'Random', 'Small-world', 'Scale-free',
                   'SGPA']
graph_names_dir = ['Connectome', 'Random', 'SGPA']

graph_metrics_und = []
graph_metrics_dir = []

# Metrics arrays are (function/metric x number/prop removed x repeats)

for g_name in graph_names_und:
    # Load undirected graph metrics
    load_fname = op.join(load_dir, g_name + '_undirected_perc.pkl')
    open_file = open(load_fname, 'rb')
    graph_metrics_und.append(pickle.load(open_file))
    open_file.close()

    # Calculate mean and std dev across repeats
    for g_dict in graph_metrics_und:
        g_dict['data_rand_avg'] = np.mean(g_dict['data_rand'], axis=-1)
        g_dict['data_rand_std'] = np.std(g_dict['data_rand'], axis=-1)
        g_dict['data_targ_avg'] = np.mean(g_dict['data_targ'], axis=-1)
        g_dict['data_targ_std'] = np.std(g_dict['data_targ'], axis=-1)
        g_dict['data_targ_thresh_avg'] = np.mean(g_dict['data_targ_thresh'], axis=-1)
        g_dict['data_targ_thresh_std'] = np.std(g_dict['data_targ_thresh'], axis=-1)

if directed:
    # Load directed graph metrics
    for g_name in graph_names_dir:
        load_fname = op.join(load_dir, g_name + '_directed_perc.pkl')
        open_file = open(load_fname, 'rb')
        graph_metrics_dir.append(pickle.load(open_file))
        open_file.close()

    # Calculate mean and std dev across repeats
    for g_dict in graph_metrics_dir:
        g_dict['data_rand_avg'] = np.mean(g_dict['data_rand'], axis=-1)
        g_dict['data_rand_std'] = np.std(g_dict['data_rand'], axis=-1)
        g_dict['data_targ_avg'] = np.mean(g_dict['data_targ'], axis=-1)
        g_dict['data_targ_std'] = np.std(g_dict['data_targ'], axis=-1)

# Get number of nodes removed and proportion of nodes removed
lesion_list = g_dict['removed_targ']
prop_rm = g_dict['removed_rand']

###############
# Plot results
###############
# Set font type for compatability with adobe if doing editing later
plt.close('all')
mpl.rcParams['ps.fonttype'] = 42
mpl.rcParams['pdf.fonttype'] = 42
plt.ion()

col_d = cf.COLORS
graph_col = [col_d['brain'], col_d['configuration'], col_d['small-world'],
             col_d['scale-free'], col_d['pgpa']]
LW = 2.5
FONTSIZE = 13
FIGSIZE = (7.5, 6)

FACECOLOR = cf.FACE_COLOR
#LABELCOLOR = cf.LABELCOLOR
#TICKSIZE = cf.TICKSIZE

##########################################################
# Random attack (undirected) with subplot for each metric
##########################################################
'''
if undirected:
    # construct figure
    fig1, ax_list1 = plt.subplots(nrows=1, ncols=2,
                                  facecolor=FACECOLOR, figsize=FIGSIZE)

    # Loop over each metric and then each graph
    for fi, func_label in enumerate(graph_metrics_und[0]['metrics_label']):
        for gi, g_dict in enumerate(graph_metrics_und):
            # Compute x axis vals, y vals, and std devs
            x = g_dict['removed_rand']
            avg = g_dict['data_rand_avg'][fi, :]
            fill_upper = avg + g_dict['data_rand_std'][fi, :]
            fill_lower = avg - g_dict['data_rand_std'][fi, :]

            # Plot traces
            ax_list1[fi].plot(x, avg, lw=LW, label=g_dict['graph_name'],
                              color=graph_col[gi])
            # Plot std deviation range
            ax_list1[fi].fill_between(x, fill_upper, fill_lower, lw=0,
                                      facecolor=graph_col[gi],
                                      interpolate=True, alpha=.3)
        ax_list1[fi].set_title('Random Attack', fontsize=FONTSIZE)
        ax_list1[fi].set_xlabel('Proportion Nodes Removed', fontsize=FONTSIZE)
        ax_list1[fi].set_ylabel(func_label, fontsize=FONTSIZE)

    ax_list1[1].legend(loc='best')

    for ax in ax_list1:
        ax.locator_params(axis='both', nbins=8)
        for text in ax.get_xticklabels() + ax.get_yticklabels():
            text.set_fontsize(FONTSIZE)
    fig1.set_tight_layout(True)

    ############################################################
    # Targeted attack (undirected) with subplot for each metric
    ############################################################
    fig2, ax_list2 = plt.subplots(nrows=1, ncols=2,
                                  facecolor=FACECOLOR, figsize=FIGSIZE)

    for fi, func_label in enumerate(graph_metrics_und[0]['metrics_label']):
        for gi, g_dict in enumerate(graph_metrics_und):
            x = g_dict['removed_targ']
            avg = g_dict['data_targ_avg'][fi, :]
            fill_upper = avg + g_dict['data_targ_std'][fi, :]
            fill_lower = avg - g_dict['data_targ_std'][fi, :]

            ax_list2[fi].plot(x, avg, lw=LW, label=g_dict['graph_name'],
                              color=graph_col[gi])
            ax_list2[fi].fill_between(x, fill_upper, fill_lower, lw=0,
                                      facecolor=graph_col[gi],
                                      interpolate=True, alpha=.3)
        ax_list2[fi].set_title('Targeted Attack', fontsize=FONTSIZE)
        ax_list2[fi].set_xlabel('Number of Nodes Removed', fontsize=FONTSIZE)
        ax_list2[fi].set_ylabel(func_label, fontsize=FONTSIZE)

    ax_list2[1].legend(loc='best')

    for ax in ax_list2:
        ax.locator_params(axis='both', nbins=8)
        for text in ax.get_xticklabels() + ax.get_yticklabels():
            text.set_fontsize(FONTSIZE)
    ax_list2[1].set_ylim([0, .3])  # Manually set to prevent lower axis < 0
    fig2.set_tight_layout(True)

########################################################
# Random attack (directed) with subplot for each metric
########################################################
if directed:
    fig3, ax_list3 = plt.subplots(nrows=1, ncols=len(graph_metrics_dir[0]['metrics_list']),
                                  facecolor=FACECOLOR, figsize=FIGSIZE)

    for fi, func_label in enumerate(graph_metrics_dir[0]['metrics_label']):
        for gi, g_dict in enumerate(graph_metrics_dir):
            x = g_dict['removed_rand']
            avg = g_dict['data_rand_avg'][fi, :]
            fill_upper = avg + g_dict['data_rand_std'][fi, :]
            fill_lower = avg - g_dict['data_rand_std'][fi, :]

            ax_list3[fi].plot(x, avg, lw=LW, label=g_dict['graph_name'],
                              color=graph_col[gi])
            ax_list3[fi].fill_between(x, fill_upper, fill_lower, lw=0,
                                      facecolor=graph_col[gi],
                                      interpolate=True, alpha=.3)
        ax_list3[fi].set_title('Random Attack', fontsize=FONTSIZE)
        ax_list3[fi].set_xlabel('Proportion Nodes Removed', fontsize=FONTSIZE)
        ax_list3[fi].set_ylabel(func_label, fontsize=FONTSIZE)

    ax_list3[1].legend(loc='best')

    for ax in ax_list3:
        for text in ax.get_xticklabels() + ax.get_yticklabels():
            text.set_fontsize(FONTSIZE)
    fig3.set_tight_layout(True)

    ###########################################################
    # Targeted attack (directed) with subplot for each metric
    ###########################################################
    fig4, ax_list4 = plt.subplots(nrows=1, ncols=len(graph_metrics_dir[0]['metrics_list']),
                                  facecolor=FACECOLOR, figsize=FIGSIZE)

    for fi, func_label in enumerate(graph_metrics_dir[0]['metrics_label']):
        for gi, g_dict in enumerate(graph_metrics_dir):
            x = g_dict['removed_targ']
            avg = g_dict['data_targ_avg'][fi, :]
            fill_upper = avg + g_dict['data_targ_std'][fi, :]
            fill_lower = avg - g_dict['data_targ_std'][fi, :]

            ax_list4[fi].plot(x, avg, lw=LW, label=g_dict['graph_name'],
                              color=graph_col[gi])
            ax_list4[fi].fill_between(x, fill_upper, fill_lower, lw=0,
                                      facecolor=graph_col[gi],
                                      interpolate=True, alpha=.3)
        ax_list4[fi].set_title('Targeted Attack', fontsize=FONTSIZE)
        ax_list4[fi].set_xlabel('Number of Nodes Removed', fontsize=FONTSIZE)
        ax_list4[fi].set_ylabel(func_label, fontsize=FONTSIZE)

    ax_list4[1].legend(loc='best')

    for ax in ax_list4:
        for text in ax.get_xticklabels() + ax.get_yticklabels():
            text.set_fontsize(FONTSIZE)
    fig4.set_tight_layout(True)
'''
#####################
# Combined plot hack
#####################
# Targeted attack (one by one) and targeted attack (using threshold)
# Metrics: largest (giant) component and undirected efficiency

fig5, ax_list5 = plt.subplots(nrows=2, ncols=2, figsize=FIGSIZE,
                              facecolor=FACECOLOR, sharex='col', sharey='row')

labels = ['a', 'b', 'c', 'd']

'''
# Random attack, undirected efficiency
for gi, g_dict in enumerate(graph_metrics_und):
    x = g_dict['removed_rand']
    avg = g_dict['data_rand_avg'][1, :]
    fill_upper = avg + g_dict['data_rand_std'][fi, :]
    fill_lower = avg - g_dict['data_rand_std'][fi, :]

    ax_list5[0].plot(x, avg, lw=LW, label=g_dict['graph_name'],
                     color=graph_col[gi])
    ax_list5[0].fill_between(x, fill_upper, fill_lower, lw=0,
                             facecolor=graph_col[gi],
                             interpolate=True, alpha=.4)

ax_list5[0].set_title('Random Attack', fontsize=FONTSIZE)
ax_list5[0].set_xlabel('Prop. Nodes Removed', fontsize=FONTSIZE)
ax_list5[0].set_ylabel(graph_metrics_und[0]['metrics_label'][1],
                       fontsize=FONTSIZE, va='baseline')
                       '''

# Targetted attack, undirected efficiency and largest component
# Roll axis on two data matrices just to reverse order of plot

# TODO: Hack; Fix below after rerunning percolation_genAndSave
#metric_labels = np.roll(graph_metrics_und[0]['metrics_label'], shift=1, axis=0)
metric_labels = ['Largest (giant) component', 'Global efficiency']
lesion_types = ['targ', 'targ_thresh']
x_axis_labels = ['Nodes removed', 'Threshold for removal']

for gi, g_dict in enumerate(graph_metrics_und):
    for mi, metric in enumerate(metric_labels):
        for li, lesion_type in enumerate(lesion_types):

            avg = np.squeeze(g_dict['data_' + lesion_type + '_avg'][mi, :])
            std = np.squeeze(g_dict['data_' + lesion_type + '_std'][mi, :])

            '''
            targ_avg = np.roll(g_dict['data_targ_avg'], shift=1, axis=0)
            targ_std = np.roll(g_dict['data_targ_std'], shift=1, axis=0)
            '''

            x = g_dict['removed_' + lesion_type]
            fill_upper = avg + std
            fill_lower = avg - std

            ax_list5[mi, li].plot(x, avg, lw=LW, label=g_dict['graph_name'],
                                  color=graph_col[gi])
            ax_list5[mi, li].fill_between(x, fill_upper, fill_lower, lw=0,
                                          facecolor=graph_col[gi],
                                          interpolate=True, alpha=.4)

ax_list5[1, 0].set_xlabel(x_axis_labels[0], fontsize=FONTSIZE)
ax_list5[1, 1].set_xlabel(x_axis_labels[1], fontsize=FONTSIZE)

ax_list5[0, 0].set_ylim([0, 500])
ax_list5[0, 1].set_ylim([0, 500])
ax_list5[1, 0].set_ylim([0, 0.6])
ax_list5[1, 1].set_ylim([0, 0.6])

ax_list5[0, 0].set_ylabel(metric_labels[0], fontsize=FONTSIZE, va='baseline')
ax_list5[1, 0].set_ylabel(metric_labels[1], fontsize=FONTSIZE, va='baseline')
ax_list5[0, 0].legend(loc='best', prop={'size': FONTSIZE - 3})

for (ax_x, ax_y), ax in np.ndenumerate(ax_list5):
    ax.locator_params(axis='both', nbins=5)
    for text in ax.get_xticklabels() + ax.get_yticklabels():
        text.set_fontsize(FONTSIZE)
    ax.text(0.08, .92, labels[ax_x*2 + ax_y], color='k', fontsize=FONTSIZE + 1,
            fontweight='bold', transform=ax.transAxes)

ax_list5[0, 0].set_xlim([0, 426])
ax_list5[1, 0].set_xlim([0, 426])
ax_list5[0, 1].set_xlim([100, 0])
ax_list5[1, 1].set_xlim([100, 0])

fig5.set_tight_layout(True)

fig5.savefig(op.join(load_dir, 'percolation_plot.png'), dpi=300)

#########################
# Plot connection density
#########################
# Targeted attack (one by one) and targeted attack (using threshold)
# Metrics: largest (giant) component and undirected efficiency

edge_di = 2  # Edge density index
#edge_di1 = g_dict['metrics_list'].index('Connection density')
#assert edge_di1 == edge_di

fig6, ax6 = plt.subplots(figsize=(3.5, 3.5), facecolor=FACECOLOR)

for gi, g_dict in enumerate(graph_metrics_und):
    #for li, lesion_type in enumerate(lesion_types):

    avg = np.squeeze(g_dict['data_' + lesion_types[0] + '_avg'][edge_di, :])
    std = np.squeeze(g_dict['data_' + lesion_types[0] + '_std'][edge_di, :])

    x = g_dict['removed_' + lesion_types[0]]
    fill_upper = avg + std
    fill_lower = avg - std

    ax6.plot(x, avg, lw=LW, label=g_dict['graph_name'], color=graph_col[gi])
    ax6.fill_between(x, fill_upper, fill_lower, lw=0, facecolor=graph_col[gi],
                     interpolate=True, alpha=.4)


ax6.set_xlabel(x_axis_labels[0])
ax6.set_ylabel('Connection density')
ax6.set_xlim([0, 426])
ax6.set_ylim([0, 8000])
ax6.locator_params(axis='both', n_bins=2)

#ax6.set_aspect('equal')
'''
ax_list6[1].set_xlabel(x_axis_labels[1])
ax_list6[1].set_xlim([150, 0])
ax_list6[1].set_ylim([0, 8000])
'''

fig6.set_tight_layout(True)

plt.show()
