"""
Plot percolation data for fig 7 (as generated by fig7_genAndSaveData.py)
"""

import os
import os.path as op
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import pickle

import config as cf

load_dir = os.environ['DBW_SAVE_CACHE']
#################
# Load graph data
#################
graph_names_und = ['Connectome', 'Random', 'Small-world', 'Scale-free', 'SGPA']
graph_metrics_und = []

# Metrics arrays are (function/metric x number/prop removed x repeats)
for g_name in graph_names_und:

    # Load undirected graph metrics
    load_fname = op.join(load_dir, g_name + '_undirected_perc.pkl')
    open_file = open(load_fname, 'rb')
    graph_metrics_und.append(pickle.load(open_file))
    open_file.close()

    # Calculate mean and std dev across repeats and store in dict
    for g_dict in graph_metrics_und:
        g_dict['data_targ_avg'] = np.mean(g_dict['data_targ'], axis=-1)
        g_dict['data_targ_std'] = np.std(g_dict['data_targ'], axis=-1)

# Get number of nodes removed (same across all networks)
lesion_list = g_dict['removed_targ']

###############
# Plot results
###############
# Set font type for compatability with adobe if doing editing later
plt.close('all')
mpl.rcParams['ps.fonttype'] = 42
mpl.rcParams['pdf.fonttype'] = 42
plt.ion()

col_d = cf.COLORS
graph_col = [col_d['brain'], col_d['configuration'], col_d['small-world'],
             col_d['scale-free'], col_d['pgpa']]

LW = 2.5
FONTSIZE = 13
FIGSIZE = (7.5, 4)

###########################################
# Plot two metrics vs. nodes removed
# (Largest component and und. global eff.)
###########################################

fig, ax_list = plt.subplots(nrows=1, ncols=2, figsize=FIGSIZE,
                            facecolor=cf.FACE_COLOR)
metric_labels = ['Largest (giant) component', 'Global efficiency']

for gi, g_dict in enumerate(graph_metrics_und):
    # Check that inds 0 and 1 are correct metrics
    assert g_dict['metrics_list'][0:2] == ['lesion_met_largest_component',
                                           'global_efficiency']
    for mi, metric in enumerate(metric_labels):
        x = g_dict['removed_targ']
        avg = np.squeeze(g_dict['data_targ_avg'][mi, :])

        # Plot metric mean line
        ax_list[mi].plot(x, avg, lw=LW, label=g_dict['graph_name'],
                         color=graph_col[gi])

        # Create shaded regions for STDEVs
        std = np.squeeze(g_dict['data_targ_std'][mi, :])
        fill_upper = avg + std
        fill_lower = avg - std

        ax_list[mi].fill_between(x, fill_upper, fill_lower, lw=0,
                                 facecolor=graph_col[gi], interpolate=True,
                                 alpha=0.4)

        # Set X and Y label
        ax_list[mi].set_xlabel('Nodes removed', fontsize=FONTSIZE)
        ax_list[mi].set_ylabel(metric, fontsize=FONTSIZE, va='baseline')

# Set other plot properties
labels = ['a', 'b']

ax_list[0].legend(loc='best', prop={'size': FONTSIZE - 2})

ax_list[0].set_ylim([0, 426])
ax_list[0].set_aspect('equal')
ax_list[1].set_ylim([0, 0.6])
ax_list[1].set_aspect(426 / 0.6)

x_off = [0.11, 0.06]  # X offset for 'a' and 'b' labels
for ax_i, ax in enumerate(ax_list):
    ax.set_xlim([0, 426])
    ax.locator_params(axis='both', nbins=6)
    ax.text(x_off[ax_i], .92, labels[ax_i], color='k', fontsize=FONTSIZE + 1,
            fontweight='bold', transform=ax.transAxes)

    for text in ax.get_xticklabels() + ax.get_yticklabels():
        text.set_fontsize(FONTSIZE)

fig.set_tight_layout(True)

# Save pdf and png
fig.savefig(op.join(load_dir, 'fig7.png'), dpi=300)
fig.savefig(op.join(load_dir, 'fig7.pdf'), dpi=300)

plt.show()
